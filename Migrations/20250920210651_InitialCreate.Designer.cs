// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.Database;

#nullable disable

namespace DRCS.Migrations
{
    [DbContext(typeof(DrcsContext))]
    [Migration("20250920210651_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.Entities.AffectedArea", b =>
                {
                    b.Property<int>("AreaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AreaID"));

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AreaType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Population")
                        .HasColumnType("integer");

                    b.Property<string>("SeverityLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AreaID");

                    b.ToTable("AffectedAreas");
                });

            modelBuilder.Entity("backend.Models.Entities.AidPreparation", b =>
                {
                    b.Property<int>("PreparationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PreparationID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DepartureTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EstimatedArrival")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RequestID")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PreparationID");

                    b.HasIndex("RequestID");

                    b.ToTable("AidPreparations");
                });

            modelBuilder.Entity("backend.Models.Entities.AidPreparationResource", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PreparationID")
                        .HasColumnType("integer");

                    b.Property<int>("QuantityUsed")
                        .HasColumnType("integer");

                    b.Property<int>("ResourceID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ID");

                    b.HasIndex("PreparationID");

                    b.HasIndex("ResourceID");

                    b.ToTable("AidPreparationResources");
                });

            modelBuilder.Entity("backend.Models.Entities.AidPreparationVolunteer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PreparationID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VolunteerID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("PreparationID");

                    b.ToTable("AidPreparationVolunteers");
                });

            modelBuilder.Entity("backend.Models.Entities.AidRequest", b =>
                {
                    b.Property<int>("RequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RequestID"));

                    b.Property<int>("AreaID")
                        .HasColumnType("integer");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RequesterName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("ResponseTime")
                        .HasColumnType("interval");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UrgencyLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("RequestID");

                    b.HasIndex("AreaID");

                    b.HasIndex("UserID");

                    b.ToTable("AidRequests");
                });

            modelBuilder.Entity("backend.Models.Entities.Donation", b =>
                {
                    b.Property<int>("DonationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DonationID"));

                    b.Property<int>("AssociatedCenter")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateReceived")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DonationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DonorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("DonationID");

                    b.HasIndex("AssociatedCenter");

                    b.HasIndex("UserID");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("backend.Models.Entities.ReliefCenter", b =>
                {
                    b.Property<int>("CenterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CenterID"));

                    b.Property<string>("CenterName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ManagerID")
                        .HasColumnType("integer");

                    b.Property<int>("MaxVolunteersCapacity")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfVolunteersWorking")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CenterID");

                    b.ToTable("ReliefCenters");
                });

            modelBuilder.Entity("backend.Models.Entities.RescueTracking", b =>
                {
                    b.Property<int>("TrackingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TrackingID"));

                    b.Property<DateTime?>("CompletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NumberOfPeopleHelped")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("OperationStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RequestID")
                        .HasColumnType("integer");

                    b.Property<string>("TrackingStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TrackingID");

                    b.HasIndex("RequestID");

                    b.ToTable("RescueTrackings");
                });

            modelBuilder.Entity("backend.Models.Entities.RescueTrackingVolunteer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TrackingID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VolunteerID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("TrackingID");

                    b.ToTable("RescueTrackingVolunteers");
                });

            modelBuilder.Entity("backend.Models.Entities.Resource", b =>
                {
                    b.Property<int>("ResourceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ResourceID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("ReliefCenterID")
                        .HasColumnType("integer");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ResourceID");

                    b.HasIndex("ReliefCenterID");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("backend.Models.Entities.Skill", b =>
                {
                    b.Property<int>("SkillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SkillID"));

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SkillID");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("backend.Models.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("backend.Models.Entities.Volunteer", b =>
                {
                    b.Property<int>("VolunteerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VolunteerID"));

                    b.Property<int?>("AssignedCenter")
                        .HasColumnType("integer");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("VolunteerID");

                    b.HasIndex("AssignedCenter");

                    b.HasIndex("UserID");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("backend.Models.Entities.VolunteerSkill", b =>
                {
                    b.Property<int>("VolunteerID")
                        .HasColumnType("integer");

                    b.Property<int>("SkillID")
                        .HasColumnType("integer");

                    b.HasKey("VolunteerID", "SkillID");

                    b.HasIndex("SkillID");

                    b.ToTable("VolunteerSkills");
                });

            modelBuilder.Entity("backend.Models.Entities.AidPreparation", b =>
                {
                    b.HasOne("backend.Models.Entities.AidRequest", null)
                        .WithMany()
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.Entities.AidPreparationResource", b =>
                {
                    b.HasOne("backend.Models.Entities.AidPreparation", null)
                        .WithMany()
                        .HasForeignKey("PreparationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Entities.Resource", null)
                        .WithMany()
                        .HasForeignKey("ResourceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.Entities.AidPreparationVolunteer", b =>
                {
                    b.HasOne("backend.Models.Entities.AidPreparation", null)
                        .WithMany()
                        .HasForeignKey("PreparationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.Entities.AidRequest", b =>
                {
                    b.HasOne("backend.Models.Entities.AffectedArea", null)
                        .WithMany()
                        .HasForeignKey("AreaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.Entities.Donation", b =>
                {
                    b.HasOne("backend.Models.Entities.ReliefCenter", "ReliefCenter")
                        .WithMany("Donations")
                        .HasForeignKey("AssociatedCenter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReliefCenter");
                });

            modelBuilder.Entity("backend.Models.Entities.RescueTracking", b =>
                {
                    b.HasOne("backend.Models.Entities.AidRequest", null)
                        .WithMany()
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.Entities.RescueTrackingVolunteer", b =>
                {
                    b.HasOne("backend.Models.Entities.RescueTracking", null)
                        .WithMany()
                        .HasForeignKey("TrackingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.Entities.Resource", b =>
                {
                    b.HasOne("backend.Models.Entities.ReliefCenter", "ReliefCenter")
                        .WithMany("Resources")
                        .HasForeignKey("ReliefCenterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReliefCenter");
                });

            modelBuilder.Entity("backend.Models.Entities.Volunteer", b =>
                {
                    b.HasOne("backend.Models.Entities.ReliefCenter", "ReliefCenter")
                        .WithMany("Volunteers")
                        .HasForeignKey("AssignedCenter")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("backend.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReliefCenter");
                });

            modelBuilder.Entity("backend.Models.Entities.VolunteerSkill", b =>
                {
                    b.HasOne("backend.Models.Entities.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Entities.Volunteer", null)
                        .WithMany()
                        .HasForeignKey("VolunteerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.Entities.ReliefCenter", b =>
                {
                    b.Navigation("Donations");

                    b.Navigation("Resources");

                    b.Navigation("Volunteers");
                });
#pragma warning restore 612, 618
        }
    }
}
