@{
    Layout = "~/Views/Shared/Sidebar/_VolunteerLayout.cshtml";
    ViewData["Title"] = "Volunteer Dashboard";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Volunteer Dashboard</title>
    <!-- Bootstrap 5 CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <!-- Toastr CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet">
    <style>
        * {
            font-family: 'Poppins', sans-serif;
        }

        :root {
            --primary-color: #2c5f2d;
            --secondary-color: #97bc62;
            --accent-color: #ffd700;
            --text-dark: #333;
            --text-light: #666;
            --bg-light: #f8f9fa;
            --card-shadow: 0 4px 12px rgba(44, 95, 45, 0.1);
        }

        .dashboard-container {
            padding: 20px;
        }

        .welcome-section {
            background: linear-gradient(135deg, var(--secondary-color) 0%, var(--primary-color) 100%);
            border-radius: 12px;
            padding: 25px;
            color: white;
            margin-bottom: 25px;
        }

            .welcome-section h1 {
                font-weight: 700;
                margin-bottom: 5px;
                font-size: 1.8rem;
            }

            .welcome-section p {
                opacity: 0.9;
                margin-bottom: 0;
                font-size: 1rem;
            }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 25px;
        }

        .stat-card {
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: var(--card-shadow);
            border-left: 4px solid var(--secondary-color);
        }

        .stat-header {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }

        .stat-icon {
            width: 40px;
            height: 40px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
            background: rgba(151, 188, 98, 0.2);
            color: var(--primary-color);
            margin-right: 12px;
        }

        .stat-content {
            text-align: left;
        }

        .stat-number {
            font-size: 1.8rem;
            font-weight: 700;
            line-height: 1;
            margin-bottom: 5px;
            color: var(--primary-color);
        }

        .stat-label {
            font-size: 0.9rem;
            color: var(--text-light);
            font-weight: 500;
        }

        .data-section {
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: var(--card-shadow);
            margin-bottom: 25px;
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #f0f0f0;
        }

        .section-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--primary-color);
            margin: 0;
        }

        .task-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .task-item {
            display: flex;
            align-items: center;
            padding: 15px;
            border-bottom: 1px solid #f0f0f0;
        }

            .task-item:last-child {
                border-bottom: none;
            }

        .task-priority {
            width: 6px;
            height: 35px;
            border-radius: 3px;
            margin-right: 15px;
        }

        .priority-high {
            background-color: #dc3545;
        }

        .priority-medium {
            background-color: #ffc107;
        }

        .priority-low {
            background-color: #28a745;
        }

        .task-content {
            flex: 1;
        }

        .task-title {
            font-weight: 600;
            margin-bottom: 5px;
            color: var(--text-dark);
            font-size: 1rem;
        }

        .task-details {
            display: flex;
            gap: 15px;
            font-size: 0.85rem;
            color: var(--text-light);
            flex-wrap: wrap;
        }

        .task-detail {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .task-status {
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 0.75rem;
            font-weight: 500;
        }

        .status-completed {
            background-color: #e8f5e9;
            color: #2e7d32;
        }

        .status-progress {
            background-color: #e3f2fd;
            color: #1565c0;
        }

        .status-pending {
            background-color: #fff3e0;
            color: #ef6c00;
        }

        .quick-actions {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 25px;
        }

        .action-card {
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: var(--card-shadow);
            text-align: center;
            cursor: pointer;
            transition: all 0.2s ease;
            border: 1px solid #f0f0f0;
        }

            .action-card:hover {
                border-color: var(--secondary-color);
                box-shadow: 0 6px 15px rgba(44, 95, 45, 0.15);
            }

        .action-icon {
            margin-bottom: 12px;
            font-size: 1.8rem;
            color: var(--primary-color);
        }

        .action-title {
            font-weight: 600;
            margin-bottom: 5px;
            color: var(--primary-color);
            font-size: 1rem;
        }

        .action-desc {
            font-size: 0.85rem;
            color: var(--text-light);
        }

        .data-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 25px;
        }

        .data-card {
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: var(--card-shadow);
        }

        .data-item {
            display: flex;
            justify-content: space-between;
            padding: 10px 0;
            border-bottom: 1px solid #f0f0f0;
        }

            .data-item:last-child {
                border-bottom: none;
            }

        .data-label {
            color: var(--text-light);
            font-weight: 500;
        }

        .data-value {
            color: var(--primary-color);
            font-weight: 600;
        }

        .empty-state {
            text-align: center;
            padding: 30px 20px;
            color: var(--text-light);
        }

        .loader {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(151, 188, 98, 0.3);
            border-radius: 50%;
            border-top-color: var(--secondary-color);
            animation: spin 1s ease-in-out infinite;
        }

       

        .loader-container {
            text-align: center;
            padding: 20px;
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <!-- Welcome Section -->
        <div class="welcome-section">
            <h1>Welcome Back, Volunteer!</h1>
            <p>Here's your rescue operations overview for today</p>
        </div>

        <!-- Quick Actions -->
        <div class="quick-actions">
            <div class="action-card" onclick="location.href='/Volunteer/Tasks'">
                <div class="action-icon">
                    <i class="bi bi-list-task"></i>
                </div>
                <div class="action-title">View Tasks</div>
                <div class="action-desc">Check your assigned tasks</div>
            </div>
            <div class="action-card" onclick="location.href='/Volunteer/Tracking'">
                <div class="action-icon">
                    <i class="bi bi-geo-alt"></i>
                </div>
                <div class="action-title">Rescue Tracking</div>
                <div class="action-desc">Update rescue progress</div>
            </div>
            <div class="action-card" onclick="location.href='/Volunteer/Reports'">
                <div class="action-icon">
                    <i class="bi bi-clipboard-data"></i>
                </div>
                <div class="action-title">Generate Report</div>
                <div class="action-desc">Create activity report</div>
            </div>
        </div>

        <!-- Stats Grid -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-header">
                    <div class="stat-icon">
                        <i class="bi bi-list-task"></i>
                    </div>
                    <div class="stat-content">
                        <div class="stat-number" id="totalTasks">0</div>
                        <div class="stat-label">Total Tasks</div>
                    </div>
                </div>
            </div>

            <div class="stat-card">
                <div class="stat-header">
                    <div class="stat-icon">
                        <i class="bi bi-check-circle"></i>
                    </div>
                    <div class="stat-content">
                        <div class="stat-number" id="completedTasks">0</div>
                        <div class="stat-label">Completed</div>
                    </div>
                </div>
            </div>

            <div class="stat-card">
                <div class="stat-header">
                    <div class="stat-icon">
                        <i class="bi bi-people"></i>
                    </div>
                    <div class="stat-content">
                        <div class="stat-number" id="peopleHelped">0</div>
                        <div class="stat-label">People Helped</div>
                    </div>
                </div>
            </div>

            <div class="stat-card">
                <div class="stat-header">
                    <div class="stat-icon">
                        <i class="bi bi-exclamation-triangle"></i>
                    </div>
                    <div class="stat-content">
                        <div class="stat-number" id="urgentTasks">0</div>
                        <div class="stat-label">Urgent Tasks</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Task Status Overview -->
        <div class="data-grid">
            <div class="data-card">
                <div class="section-header">
                    <h3 class="section-title">Task Status</h3>
                </div>
                <div class="data-item">
                    <span class="data-label">In Progress</span>
                    <span class="data-value" id="inProgressTasks">0 tasks</span>
                </div>
                <div class="data-item">
                    <span class="data-label">Pending</span>
                    <span class="data-value" id="pendingTasks">0 tasks</span>
                </div>
                <div class="data-item">
                    <span class="data-label">Completion Rate</span>
                    <span class="data-value" id="completionRate">0%</span>
                </div>
            </div>

            <div class="data-card">
                <div class="section-header">
                    <h3 class="section-title">Task Types</h3>
                </div>
                <div class="data-item">
                    <span class="data-label">Rescue Operations</span>
                    <span class="data-value" id="rescueTasks">0 tasks</span>
                </div>
                <div class="data-item">
                    <span class="data-label">Aid Delivery</span>
                    <span class="data-value" id="aidTasks">0 tasks</span>
                </div>
                <div class="data-item">
                    <span class="data-label">Other Tasks</span>
                    <span class="data-value" id="otherTasks">0 tasks</span>
                </div>
            </div>
        </div>

        <!-- Recent Tasks -->
        <div class="data-section">
            <div class="section-header">
                <h3 class="section-title">Recent Tasks</h3>
                <a href="/Volunteer/Tasks" class="btn btn-sm btn-outline-primary">View All</a>
            </div>

            <div class="loader-container d-none" id="tasksLoader">
                <div class="loader"></div>
                <p class="mt-2">Loading tasks...</p>
            </div>

            <ul class="task-list" id="recentTasksList">
                <div class="empty-state">
                    <p>No tasks found. Tasks will appear here once assigned.</p>
                </div>
            </ul>
        </div>
    </div>

    <!-- Toastr JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script>
        // Initialize toastr
        toastr.options = {
            closeButton: true,
            progressBar: true,
            positionClass: "toast-top-right",
            timeOut: "5000"
        };

        document.addEventListener('DOMContentLoaded', function() {
            const volunteerId = localStorage.getItem('volunteer_id');
            if (!volunteerId) {
                toastr.error('Volunteer ID not found. Please log in again.');
                return;
            }

            loadDashboardData(volunteerId);
        });

        async function loadDashboardData(volunteerId) {
            try {
                // Show loader
                document.getElementById('tasksLoader').classList.remove('d-none');

                // Fetch both types of tasks
                const [rescueTasks, aidTasks] = await Promise.all([
                    fetchRescueTasks(volunteerId),
                    fetchAidTasks(volunteerId)
                ]);

                // Process and combine tasks
                const allTasks = processTasks(rescueTasks, aidTasks);

                // Update dashboard with the data
                updateDashboard(allTasks);

            } catch (error) {
                console.error('Error loading dashboard data:', error);
                toastr.error('Failed to load dashboard data: ' + error.message);
            } finally {
                // Hide loader
                document.getElementById('tasksLoader').classList.add('d-none');
            }
        }

        async function fetchRescueTasks(volunteerId) {
            try {
                const response = await fetch(`/api/volunteers/${volunteerId}/rescue-tracking-tasks`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                if (result.success) {
                    return result.data || [];
                } else {
                    throw new Error(result.message || 'Failed to fetch rescue tasks');
                }
            } catch (error) {
                console.error('Error fetching rescue tasks:', error);
                toastr.error('Failed to load rescue tasks: ' + error.message);
                return [];
            }
        }

        async function fetchAidTasks(volunteerId) {
            try {
                const token = localStorage.getItem('access_token'); // Assuming token is stored
                const response = await fetch(`/api/volunteers/${volunteerId}/aid-prep-tasks`, {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error(`Failed to fetch tasks: ${response.statusText}`);
                }

                const result = await response.json();
                if (result.success) {
                    return result.data || [];
                } else {
                    throw new Error(result.message || 'Failed to fetch aid tasks');
                }
            } catch (error) {
                console.error('Error fetching aid tasks:', error);
                toastr.error('Failed to load aid tasks: ' + error.message);
                return [];
            }
        }

        function processTasks(rescueTasks, aidTasks) {
            // Add type property to distinguish between task types
            const processedRescueTasks = (rescueTasks || []).map(task => ({
                ...task,
                type: 'Rescue',
                displayStatus: task.status || task.request_status,
                displayDescription: task.description || `Rescue task in ${task.area_name || 'unknown area'}`,
                displayUrgency: task.urgencyLevel,
                displayTime: task.operation_start_time || task.requestDate
            }));

            const processedAidTasks = (aidTasks || []).map(task => ({
                ...task,
                type: 'Aid',
                displayStatus: task.task_status,
                displayDescription: task.description || `Aid preparation task`,
                displayUrgency: task.urgencyLevel,
                displayTime: task.departure_time || task.task_created_at
            }));

            // Combine and sort by time (newest first)
            return [...processedRescueTasks, ...processedAidTasks]
                .sort((a, b) => new Date(b.displayTime) - new Date(a.displayTime));
        }

        function updateDashboard(tasks) {
            // Update statistics
            updateStatistics(tasks);

            // Update recent tasks list
            renderRecentTasks(tasks.slice(0, 5)); // Show only 5 most recent tasks
        }

        function updateStatistics(tasks) {
            const totalTasks = tasks.length;
            const completedTasks = tasks.filter(task =>
                task.displayStatus === 'Completed' ||
                task.displayStatus === 'PreparationCompleted' ||
                task.status === 'Completed'
            ).length;

            const peopleHelped = tasks.reduce((sum, task) =>
                sum + (task.number_of_people_helped || 0), 0);

            const urgentTasks = tasks.filter(task =>
                task.displayUrgency === 'High').length;

            const inProgressTasks = tasks.filter(task =>
                task.displayStatus === 'In Progress' ||
                task.status === 'In Progress').length;

            const pendingTasks = tasks.filter(task =>
                task.displayStatus === 'Pending' ||
                !['Completed', 'PreparationCompleted', 'In Progress'].includes(task.displayStatus)).length;

            const completionRate = totalTasks > 0 ?
                Math.round((completedTasks / totalTasks) * 100) : 0;

            const rescueTasks = tasks.filter(task => task.type === 'Rescue').length;
            const aidTasks = tasks.filter(task => task.type === 'Aid').length;
            const otherTasks = totalTasks - rescueTasks - aidTasks;

            // Update DOM elements
            document.getElementById('totalTasks').textContent = totalTasks;
            document.getElementById('completedTasks').textContent = completedTasks;
            document.getElementById('peopleHelped').textContent = peopleHelped;
            document.getElementById('urgentTasks').textContent = urgentTasks;
            document.getElementById('inProgressTasks').textContent = `${inProgressTasks} tasks`;
            document.getElementById('pendingTasks').textContent = `${pendingTasks} tasks`;
            document.getElementById('completionRate').textContent = `${completionRate}%`;
            document.getElementById('rescueTasks').textContent = `${rescueTasks} tasks`;
            document.getElementById('aidTasks').textContent = `${aidTasks} tasks`;
            document.getElementById('otherTasks').textContent = `${otherTasks} tasks`;
        }

        function renderRecentTasks(tasks) {
            const container = document.getElementById('recentTasksList');

            if (tasks.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <p>No tasks found. Tasks will appear here once assigned.</p>
                    </div>
                `;
                return;
            }

            let html = '';
            tasks.forEach(task => {
                const priorityClass = task.displayUrgency === 'High' ? 'priority-high' :
                                    task.displayUrgency === 'Medium' ? 'priority-medium' : 'priority-low';

                const statusClass = task.displayStatus === 'Completed' || task.displayStatus === 'PreparationCompleted' ? 'status-completed' :
                                   task.displayStatus === 'In Progress' ? 'status-progress' : 'status-pending';

                // Format the date for display
                const taskDate = new Date(task.displayTime);
                const formattedDate = taskDate.toLocaleDateString() + ' ' + taskDate.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});

                html += `
                    <li class="task-item">
                        <div class="task-priority ${priorityClass}"></div>
                        <div class="task-content">
                            <div class="task-title">${task.displayDescription}</div>
                            <div class="task-details">
                                <span class="task-detail">
                                    <i class="bi bi-tag"></i> ${task.type}
                                </span>
                                <span class="task-detail">
                                    <i class="bi bi-calendar"></i> ${formattedDate}
                                </span>
                                ${task.number_of_people_helped ? `
                                <span class="task-detail">
                                    <i class="bi bi-people"></i> ${task.number_of_people_helped} people helped
                                </span>
                                ` : ''}
                            </div>
                        </div>
                        <span class="task-status ${statusClass}">${task.displayStatus}</span>
                    </li>
                `;
            });

            container.innerHTML = html;
        }
    </script>
</body>
</html>