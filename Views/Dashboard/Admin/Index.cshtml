@{
    Layout = "~/Views/Shared/Sidebar/_AdminLayout.cshtml";
    ViewData["Title"] = "Admin Dashboard";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="container-fluid">
        <!-- Page Header -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h1 class="h2 fw-bold" style="color: #2c5f2d;">Admin Dashboard</h1>
                <p class="text-muted">Welcome back! Here's what's happening with your disaster relief system today.</p>
            </div>
            <div>
                <span class="badge bg-light text-dark"><i class="bi bi-calendar me-1"></i> <span id="current-date"></span></span>
            </div>
        </div>

        <!-- Stats Cards -->
        <div class="row mb-4" id="stats-cards">
            <!-- Cards will be populated by JavaScript -->
        </div>

        <!-- Charts and Recent Activity -->
        <div class="row mb-4">
            <!-- Requests Chart -->
            <div class="col-xl-8 col-lg-7 mb-4">
                <div class="chart-container">
                    <h3 class="section-title">Aid Requests Overview</h3>
                    <canvas id="requestsChart" height="300"></canvas>
                    <div class="mt-3 row text-center" id="requests-summary">
                        <!-- Will be populated by JavaScript -->
                    </div>
                </div>
            </div>

            <!-- Recent Activity -->
            <div class="col-xl-4 col-lg-5 mb-4">
                <div class="chart-container">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h3 class="section-title mb-0">Recent Activity</h3>
                        <a href="#" class="view-all-link">View All <i class="bi bi-arrow-right ms-1"></i></a>
                    </div>
                    <div class="activity-list" id="recent-activity">
                        <!-- Will be populated by JavaScript -->
                    </div>
                </div>
            </div>
        </div>

        <!-- Recent Tables -->
        <div class="row">
            <!-- Recent Aid Requests -->
            <div class="col-xl-6 mb-4">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h3 class="section-title">Recent Aid Requests</h3>
                    <a href="/Admin/AidRequests" class="view-all-link">View All <i class="bi bi-arrow-right ms-1"></i></a>
                </div>
                <div class="table-responsive recent-table">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Requester</th>
                                <th>Type</th>
                                <th>Urgency</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody id="recent-aid-requests">
                            <!-- Will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Recent Volunteers -->
            <div class="col-xl-6 mb-4">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h3 class="section-title">Recent Volunteers</h3>
                    <a href="/Admin/Users" class="view-all-link">View All <i class="bi bi-arrow-right ms-1"></i></a>
                </div>
                <div class="table-responsive recent-table">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Contact</th>
                                <th>Center</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody id="recent-volunteers">
                            <!-- Will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        // Global variables to store data
        let aidRequests = [];
        let aidPreparations = [];
        let areas = [];
        let reliefCenters = [];
        let users = [];
        let requestsChart = null;

        // Set current date
        document.getElementById('current-date').textContent = new Date().toLocaleDateString('en-US', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });

        // Token management
        function getToken() {
            return localStorage.getItem('access_token');
        }

        // API Functions
        async function loadAidPreparations() {
            try {
                const token = getToken();
                const response = await fetch('/api/AidPreparation/full-details', {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (response.status === 401) {
                    throw new Error('Session expired. Please log in again.');
                }

                if (!response.ok) {
                    throw new Error('Failed to fetch aid preparations');
                }

                const result = await response.json();

                if (result.success && result.data) {
                    aidPreparations = result.data;
                    return result.data;
                } else {
                    throw new Error('Invalid response format from server');
                }
            } catch (error) {
                console.error('Error loading aid preparations:', error);
                throw error;
            }
        }

        async function loadAidRequests() {
            try {
                const token = getToken();
                const response = await fetch('/api/aid-requests', {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (response.status === 401) {
                    throw new Error('Session expired. Please log in again.');
                }

                if (!response.ok) {
                    throw new Error('Failed to fetch aid requests');
                }

                aidRequests = await response.json();
                return aidRequests;
            } catch (error) {
                console.error('Error loading aid requests:', error);
                throw error;
            }
        }

        async function loadAreas() {
            try {
                const response = await fetch('/api/affected-areas');

                if (!response.ok) {
                    throw new Error('Failed to fetch areas');
                }

                const result = await response.json();

                if (result.success) {
                    areas = result.data;
                    return result.data;
                } else {
                    throw new Error(result.message || 'Failed to load areas');
                }
            } catch (error) {
                console.error('Error loading areas:', error);
                throw error;
            }
        }

        async function loadReliefCenters() {
            try {
                const token = getToken();
                const response = await fetch('/api/relief-centers', {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error('Failed to fetch relief centers');
                }

                const result = await response.json();

                if (result.success) {
                    reliefCenters = result.data;
                    return result.data;
                } else {
                    throw new Error(result.message || 'Failed to load relief centers');
                }
            } catch (error) {
                console.error('Error loading relief centers:', error);
                throw error;
            }
        }

        async function loadUsers() {
            try {
                const token = getToken();
                const response = await fetch('/api/users', {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error('Failed to fetch users');
                }

                const result = await response.json();

                if (result.success) {
                    users = result.data;
                    return result.data;
                } else {
                    throw new Error(result.message || 'Failed to load users');
                }
            } catch (error) {
                console.error('Error loading users:', error);
                throw error;
            }
        }

        // Data Processing Functions
        function processStatsData() {
            // Count volunteers from users data
            const volunteerCount = users.filter(user =>
                user.roleName === 'Volunteer' || user.roleName === 'volunteer'
            ).length;

            // Count completed aid preparations
            const completedPreparations = aidPreparations.filter(prep =>
                prep.status === 'Completed' || prep.status === 'Delivered'
            ).length;

            return {
                totalUsers: users.length,
                totalVolunteers: volunteerCount,
                totalAreas: areas.length,
                totalCenters: reliefCenters.length,
                totalRequests: aidRequests.length,
                completedTasks: completedPreparations
            };
        }

        function processRequestsData() {
            const statusCounts = {
                'Pending': 0,
                'In Progress': 0,
                'Completed': 0
            };

            aidRequests.forEach(request => {
                if (request.status === 'Pending') {
                    statusCounts['Pending']++;
                } else if (request.status === 'Processing' || request.status === 'Preparing') {
                    statusCounts['In Progress']++;
                } else if (request.status === 'Completed' || request.status === 'Delivered') {
                    statusCounts['Completed']++;
                }
            });

            return statusCounts;
        }

        function getRecentActivity() {
            const activities = [];

            // Add recent aid requests as activities
            const recentRequests = [...aidRequests]
                .sort((a, b) => new Date(b.requestDate) - new Date(a.requestDate))
                .slice(0, 3);

            recentRequests.forEach(request => {
                activities.push({
                    type: 'request',
                    title: `New ${request.requestType} request`,
                    description: `${request.description.substring(0, 50)}...`,
                    time: new Date(request.requestDate),
                    icon: 'bi-clipboard-plus',
                    color: 'rgba(220, 53, 69, 0.1)',
                    iconColor: '#dc3545'
                });
            });

            // Add recent aid preparations as activities
            const recentPreparations = [...aidPreparations]
                .sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt))
                .slice(0, 2);

            recentPreparations.forEach(prep => {
                if (prep.status === 'Completed' || prep.status === 'Delivered') {
                    activities.push({
                        type: 'completion',
                        title: 'Aid preparation completed',
                        description: `Request #${prep.requestID} has been ${prep.status.toLowerCase()}`,
                        time: new Date(prep.updatedAt),
                        icon: 'bi-check-circle',
                        color: 'rgba(25, 135, 84, 0.1)',
                        iconColor: '#198754'
                    });
                }
            });

            // Sort all activities by time and return top 4
            return activities
                .sort((a, b) => b.time - a.time)
                .slice(0, 4);
        }

        // Rendering Functions
        function renderStatsCards(stats) {
            const cards = [
                {
                    title: 'Total Users',
                    value: stats.totalUsers,
                    icon: 'bi-people-fill',
                    class: 'card-users'
                },
                {
                    title: 'Volunteers',
                    value: stats.totalVolunteers,
                    icon: 'bi-heart-fill',
                    class: 'card-volunteers'
                },
                {
                    title: 'Affected Areas',
                    value: stats.totalAreas,
                    icon: 'bi-geo-alt-fill',
                    class: 'card-areas'
                },
                {
                    title: 'Relief Centers',
                    value: stats.totalCenters,
                    icon: 'bi-house-heart-fill',
                    class: 'card-centers'
                },
                {
                    title: 'Aid Requests',
                    value: stats.totalRequests,
                    icon: 'bi-clipboard-plus-fill',
                    class: 'card-requests'
                },
                {
                    title: 'Completed Tasks',
                    value: stats.completedTasks,
                    icon: 'bi-check-circle-fill',
                    class: 'card-completed'
                }
            ];

            const cardsContainer = document.getElementById('stats-cards');
            cardsContainer.innerHTML = cards.map(card => `
                <div class="col-xl-2 col-md-4 col-sm-6 mb-4">
                    <div class="card dashboard-card ${card.class}">
                        <div class="card-body text-center">
                            <div class="card-icon">
                                <i class="bi ${card.icon}"></i>
                            </div>
                            <div class="stat-number">${card.value}</div>
                            <div class="stat-label">${card.title}</div>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        function renderRequestsChart(statusCounts) {
            const ctx = document.getElementById('requestsChart').getContext('2d');

            // Destroy previous chart if it exists
            if (requestsChart) {
                requestsChart.destroy();
            }

            requestsChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['Pending', 'In Progress', 'Completed'],
                    datasets: [{
                        data: [statusCounts.Pending, statusCounts['In Progress'], statusCounts.Completed],
                        backgroundColor: [
                            'rgba(255, 193, 7, 0.8)',
                            'rgba(13, 110, 253, 0.8)',
                            'rgba(25, 135, 84, 0.8)'
                        ],
                        borderColor: [
                            'rgb(255, 193, 7)',
                            'rgb(13, 110, 253)',
                            'rgb(25, 135, 84)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });

            // Update summary
            const summaryElement = document.getElementById('requests-summary');
            summaryElement.innerHTML = `
                <div class="col-4">
                    <span class="badge badge-pending">Pending: ${statusCounts.Pending}</span>
                </div>
                <div class="col-4">
                    <span class="badge badge-progress">In Progress: ${statusCounts['In Progress']}</span>
                </div>
                <div class="col-4">
                    <span class="badge badge-completed">Completed: ${statusCounts.Completed}</span>
                </div>
            `;
        }

        function renderRecentActivity(activities) {
            const activityContainer = document.getElementById('recent-activity');

            if (activities.length === 0) {
                activityContainer.innerHTML = '<p class="text-muted text-center py-3">No recent activity</p>';
                return;
            }

            activityContainer.innerHTML = activities.map(activity => {
                const timeAgo = getTimeAgo(activity.time);

                return `
                    <div class="activity-item">
                        <div class="activity-icon" style="background-color: ${activity.color}; color: ${activity.iconColor};">
                            <i class="bi ${activity.icon}"></i>
                        </div>
                        <div class="activity-content">
                            <h6 class="mb-1">${activity.title}</h6>
                            <p class="mb-0 text-muted">${activity.description}</p>
                            <small class="activity-time">${timeAgo}</small>
                        </div>
                    </div>
                `;
            }).join('');
        }

        function renderRecentAidRequests() {
            const container = document.getElementById('recent-aid-requests');
            const recentRequests = [...aidRequests]
                .sort((a, b) => new Date(b.requestDate) - new Date(a.requestDate))
                .slice(0, 5);

            if (recentRequests.length === 0) {
                container.innerHTML = '<tr><td colspan="4" class="text-center py-3">No aid requests found</td></tr>';
                return;
            }

            container.innerHTML = recentRequests.map(request => {
                let urgencyBadgeClass = 'bg-success';
                if (request.urgencyLevel === 'Medium') urgencyBadgeClass = 'bg-warning';
                if (request.urgencyLevel === 'High') urgencyBadgeClass = 'bg-danger';

                let statusBadgeClass = 'badge-pending';
                if (request.status === 'Processing' || request.status === 'Preparing') statusBadgeClass = 'badge-progress';
                if (request.status === 'Completed' || request.status === 'Delivered') statusBadgeClass = 'badge-completed';

                return `
                    <tr>
                        <td>${request.requesterName}</td>
                        <td>${request.requestType}</td>
                        <td><span class="badge ${urgencyBadgeClass}">${request.urgencyLevel}</span></td>
                        <td><span class="status-badge ${statusBadgeClass}">${request.status}</span></td>
                    </tr>
                `;
            }).join('');
        }

        function renderRecentVolunteers() {
            const container = document.getElementById('recent-volunteers');

            // Get all volunteers from users data
            const allVolunteers = users
                .filter(user => user.roleName === 'Volunteer' && user.assignedCenter)
                .map(user => ({
                    name: user.name,
                    contactInfo: user.email,
                    centerName: user.assignedCenter.reliefCenter ? user.assignedCenter.reliefCenter.centerName : 'Unassigned',
                    status: user.assignedCenter.status,
                    createdAt: user.createdAt
                }));

            // Get recent volunteers
            const recentVolunteers = [...allVolunteers]
                .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
                .slice(0, 5);

            if (recentVolunteers.length === 0) {
                container.innerHTML = '<tr><td colspan="4" class="text-center py-3">No volunteers found</td></tr>';
                return;
            }

            container.innerHTML = recentVolunteers.map(volunteer => {
                const statusClass = volunteer.status === 'Active' ? 'bg-success' :
                                  volunteer.status === 'Pending' ? 'bg-warning' : 'bg-secondary';

                return `
                    <tr>
                        <td>${volunteer.name}</td>
                        <td>${volunteer.contactInfo}</td>
                        <td>${volunteer.centerName}</td>
                        <td><span class="badge ${statusClass}">${volunteer.status}</span></td>
                    </tr>
                `;
            }).join('');
        }

        // Utility Functions
        function getTimeAgo(date) {
            const now = new Date();
            const diffInSeconds = Math.floor((now - date) / 1000);

            if (diffInSeconds < 60) {
                return 'Just now';
            }

            const diffInMinutes = Math.floor(diffInSeconds / 60);
            if (diffInMinutes < 60) {
                return `${diffInMinutes} minute${diffInMinutes !== 1 ? 's' : ''} ago`;
            }

            const diffInHours = Math.floor(diffInMinutes / 60);
            if (diffInHours < 24) {
                return `${diffInHours} hour${diffInHours !== 1 ? 's' : ''} ago`;
            }

            const diffInDays = Math.floor(diffInHours / 24);
            if (diffInDays < 7) {
                return `${diffInDays} day${diffInDays !== 1 ? 's' : ''} ago`;
            }

            return date.toLocaleDateString();
        }

        // Initialize Dashboard
        async function initializeDashboard() {
            try {
                // Load all data in parallel
                await Promise.all([
                    loadAidRequests(),
                    loadAidPreparations(),
                    loadAreas(),
                    loadReliefCenters(),
                    loadUsers()
                ]);

                // Process and render data
                const stats = processStatsData();
                renderStatsCards(stats);

                const statusCounts = processRequestsData();
                renderRequestsChart(statusCounts);

                const activities = getRecentActivity();
                renderRecentActivity(activities);

                renderRecentAidRequests();
                renderRecentVolunteers();

            } catch (error) {
                console.error('Error initializing dashboard:', error);
                alert('Failed to load dashboard data: ' + error.message);
            }
        }

        // Start the dashboard when page loads
        document.addEventListener('DOMContentLoaded', initializeDashboard);
    </script>

    <style>
        .dashboard-card {
            border-radius: 12px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
            transition: all 0.3s ease;
            border: none;
            height: 100%;
        }

            .dashboard-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
            }

        .card-icon {
            font-size: 2.5rem;
            margin-bottom: 1rem;
            color: rgba(255, 255, 255, 0.8);
        }

        .stat-number {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .stat-label {
            font-size: 0.9rem;
            opacity: 0.9;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .card-users {
            background: linear-gradient(135deg, #2c5f2d 0%, #97bc62 100%);
            color: white;
        }

        .card-volunteers {
            background: linear-gradient(135deg, #0d6efd 0%, #6ea8fe 100%);
            color: white;
        }

        .card-areas {
            background: linear-gradient(135deg, #fd7e14 0%, #ffc107 100%);
            color: white;
        }

        .card-centers {
            background: linear-gradient(135deg, #6f42c1 0%, #d8b5ff 100%);
            color: white;
        }

        .card-requests {
            background: linear-gradient(135deg, #dc3545 0%, #ea868f 100%);
            color: white;
        }

        .card-completed {
            background: linear-gradient(135deg, #198754 0%, #75b798 100%);
            color: white;
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #2c5f2d;
            margin-bottom: 1.5rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid #97bc62;
        }

        .recent-table {
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
        }

            .recent-table thead th {
                background: linear-gradient(135deg, #2c5f2d 0%, #97bc62 100%);
                color: white;
                border: none;
                padding: 1rem;
                font-weight: 600;
            }

            .recent-table tbody td {
                padding: 1rem;
                vertical-align: middle;
                border-bottom: 1px solid #eee;
            }

            .recent-table tbody tr:last-child td {
                border-bottom: none;
            }

            .recent-table tbody tr:hover {
                background-color: rgba(151, 188, 98, 0.1);
            }

        .status-badge {
            padding: 0.35rem 0.65rem;
            border-radius: 20px;
            font-weight: 500;
            font-size: 0.85rem;
        }

        .badge-pending {
            background-color: rgba(255, 193, 7, 0.2);
            color: #b8860b;
        }

        .badge-progress {
            background-color: rgba(13, 110, 253, 0.2);
            color: #0d6efd;
        }

        .badge-completed {
            background-color: rgba(25, 135, 84, 0.2);
            color: #198754;
        }

        .chart-container {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
            height: 100%;
        }

        .activity-item {
            display: flex;
            align-items: flex-start;
            padding: 1rem 0;
            border-bottom: 1px solid #eee;
        }

            .activity-item:last-child {
                border-bottom: none;
            }

        .activity-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
            flex-shrink: 0;
            font-size: 1.2rem;
        }

        .activity-content {
            flex: 1;
        }

        .activity-time {
            font-size: 0.85rem;
            color: #6c757d;
        }

        .view-all-link {
            color: #2c5f2d;
            text-decoration: none;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
        }

            .view-all-link:hover {
                color: #234f24;
                text-decoration: underline;
            }
    </style>
</body>
</html>