@{
    Layout = "~/Views/Shared/Sidebar/_AdminLayout.cshtml";
    ViewData["Title"] = "All Users";
}

<!-- Bootstrap 5 CSS -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
<!-- Bootstrap Icons -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
<!-- Google Fonts -->
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">

<style>
    * {
        font-family: 'Poppins', sans-serif;
    }

    :root {
        --primary-color: #2c5f2d;
        --secondary-color: #97bc62;
        --accent-color: #ffd700;
        --text-dark: #333;
        --text-light: #666;
        --bg-light: #f8f9fa;
        --modal-bg: rgba(151, 188, 98, 0.1);
    }

    .page-header {
        margin-bottom: 2rem;
    }

    .page-title {
        font-size: 2.2rem;
        font-weight: 700;
        color: var(--primary-color);
        margin-bottom: 0.5rem;
    }

    .page-subtitle {
        color: var(--text-light);
        font-size: 1.1rem;
    }

    .filter-section {
        background: white;
        border-radius: 12px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
        padding: 1.5rem;
        margin-bottom: 2rem;
    }

    .filter-title {
        font-size: 1.2rem;
        font-weight: 600;
        color: var(--primary-color);
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid var(--secondary-color);
    }

    .form-label {
        font-weight: 600;
        color: var(--text-dark);
        margin-bottom: 8px;
    }

    .form-control, .form-select {
        padding: 10px 14px;
        border-radius: 8px;
        border: 1px solid #ddd;
        transition: all 0.3s;
    }

        .form-control:focus, .form-select:focus {
            border-color: var(--secondary-color);
            box-shadow: 0 0 0 0.25rem rgba(151, 188, 98, 0.25);
        }

        .form-select option:hover,
        .form-select option:focus,
        .form-select option:active,
        .form-select option:checked {
            background-color: var(--secondary-color) !important;
            color: white !important;
        }

    .table-container {
        background: white;
        border-radius: 12px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
        overflow: hidden;
        margin-bottom: 2rem;
    }

    .table {
        margin-bottom: 0;
        border-collapse: separate;
        border-spacing: 0;
    }

        .table thead th {
            background: linear-gradient(135deg, var(--secondary-color) 0%, var(--primary-color) 100%);
            color: white;
            font-weight: 600;
            padding: 1rem;
            border: none;
            text-align: left;
        }

        .table tbody td {
            padding: 1rem;
            vertical-align: middle;
            border-bottom: 1px solid #eee;
        }

        .table tbody tr:last-child td {
            border-bottom: none;
        }

        .table tbody tr:hover {
            background-color: rgba(151, 188, 98, 0.1);
        }

    .role-badge {
        padding: 0.35rem 0.65rem;
        border-radius: 20px;
        font-weight: 500;
        font-size: 0.85rem;
    }

    .badge-admin {
        background-color: rgba(220, 53, 69, 0.2);
        color: #dc3545;
    }

    .badge-user {
        background-color: rgba(151, 188, 98, 0.2);
        color: #2c5f2d;
    }

    .badge-volunteer {
        background-color: rgba(255, 193, 7, 0.2);
        color: #b8860b;
    }

    .pagination-container {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 2rem;
    }

    .page-link {
        padding: 0.5rem 1rem;
        border: 1px solid var(--secondary-color);
        color: var(--primary-color);
        border-radius: 8px;
        margin: 0 0.25rem;
        transition: all 0.3s;
    }

        .page-link:hover {
            background: linear-gradient(135deg, var(--secondary-color) 0%, var(--primary-color) 100%);
            color: white;
            border-color: var(--primary-color);
        }

    .page-item.active .page-link {
        background: linear-gradient(135deg, var(--secondary-color) 0%, var(--primary-color) 100%);
        color: white;
        border-color: var(--primary-color);
    }

    .page-item.disabled .page-link {
        color: #6c757d;
        border-color: #dee2e6;
        background-color: white;
    }

    .search-icon {
        position: absolute;
        right: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: var(--text-light);
    }

    .btn-filter {
        background: linear-gradient(135deg, var(--secondary-color) 0%, var(--primary-color) 100%);
        border: none;
        color: white;
        padding: 10px 20px;
        font-weight: 600;
        border-radius: 8px;
        transition: all 0.3s;
    }

        .btn-filter:hover {
            background: linear-gradient(135deg, var(--primary-color) 0%, #234f24 100%);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(44, 95, 45, 0.4);
            color: white;
        }

    .btn-reset {
        background: transparent;
        border: 1px solid var(--secondary-color);
        color: var(--primary-color);
        padding: 10px 20px;
        font-weight: 600;
        border-radius: 8px;
        transition: all 0.3s;
    }

        .btn-reset:hover {
            background: rgba(151, 188, 98, 0.1);
            border-color: var(--primary-color);
        }

    .highlight {
        background-color: rgba(151, 188, 98, 0.2) !important;
        transition: background-color 0.3s ease;
    }

    .action-buttons {
        display: flex;
        gap: 0.5rem;
        justify-content: center;
    }

    .btn-action {
        padding: 0.5rem;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 2.5rem;
        height: 2.5rem;
        transition: all 0.3s;
    }

    .btn-edit {
        background-color: rgba(25, 135, 84, 0.2);
        color: #198754;
        border: none;
    }

        .btn-edit:hover {
            background-color: #198754;
            color: white;
        }

    .btn-delete {
        background-color: rgba(220, 53, 69, 0.2);
        color: #dc3545;
        border: none;
    }

        .btn-delete:hover {
            background-color: #dc3545;
            color: white;
        }

    .btn-view {
        background-color: rgba(13, 110, 253, 0.2);
        color: darkgreen;
        border: none;
    }

        .btn-view:hover {
            background-color: var(--secondary-color);
            color: white;
        }

    /* Loading and error states */
    .loading-spinner {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 200px;
    }

    .error-message {
        color: #dc3545;
        text-align: center;
        padding: 2rem;
    }

    .empty-state {
        text-align: center;
        padding: 3rem;
        color: var(--text-light);
    }

    /* Modal styling */
    .modal-content {
        border-radius: 12px;
        box-shadow: 0 5px 25px rgba(0, 0, 0, 0.15);
    }

    .modal-header {
        background: linear-gradient(135deg, var(--secondary-color) 0%, var(--primary-color) 100%);
        color: white;
        border-bottom: none;
        border-radius: 12px 12px 0 0;
    }

    .modal-title {
        font-weight: 600;
    }

    .btn-close {
        filter: invert(1);
    }

    .modal-footer {
        border-top: 1px solid #eee;
        padding: 1rem;
    }
</style>

<div class="container-fluid py-4">
    <div class="page-header">
        <h1 class="page-title">All Users</h1>
        <p class="page-subtitle">View and manage all users in the system</p>
    </div>

    <!-- Filters, Sorting, and Search Controls -->
    <div class="filter-section">
        <h3 class="filter-title">Filter & Search Users</h3>
        <div class="row">
            <div class="col-md-3 mb-3">
                <label class="form-label">Role</label>
                <select id="roleFilter" class="form-select">
                    <option value="all">All Roles</option>
                    <option value="Admin">Admin</option>
                    <option value="User">User</option>
                    <option value="Volunteer">Volunteer</option>
                </select>
            </div>
            <div class="col-md-3 mb-3">
                <label class="form-label">Sort By</label>
                <select id="sortOrder" class="form-select">
                    <option value="latest">Newest First</option>
                    <option value="oldest">Oldest First</option>
                </select>
            </div>
            <div class="col-md-4 mb-3">
                <label class="form-label">Search by Name or Email</label>
                <div class="position-relative">
                    <input type="text" id="search" class="form-control" placeholder="Search users...">
                    <i class="bi bi-search search-icon"></i>
                </div>
            </div>
            <div class="col-md-2 mb-3 d-flex align-items-end">
                <button id="applyFilters" class="btn btn-filter w-100 me-2">Apply</button>
                <button id="resetFilters" class="btn btn-reset">Reset</button>
            </div>
        </div>
    </div>

    <!-- Loading Spinner -->
    <div id="loadingSpinner" class="loading-spinner">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="ms-2 mb-0">Loading users...</p>
    </div>

    <!-- Error Message -->
    <div id="errorMessage" class="error-message" style="display: none;">
        <i class="bi bi-exclamation-triangle-fill fs-1"></i>
        <p class="mt-2" id="errorText">Failed to load users</p>
        <button class="btn btn-primary mt-2" onclick="loadUsers()">Try Again</button>
    </div>

    <!-- Users Table -->
    <div class="table-container" id="usersTableContainer" style="display: none;">
        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col" class="text-center">#</th>
                        <th scope="col">Name</th>
                        <th scope="col">Email</th>
                        <th scope="col">Phone No</th>
                        <th scope="col" class="text-center">Role</th>
                        <th scope="col" class="text-center">Join Date</th>
                        <th scope="col" class="text-center">Actions</th>
                    </tr>
                </thead>
                <tbody id="usersTableBody">
                    <!-- Users will be populated by JavaScript -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- Empty State -->
    <div id="emptyState" class="empty-state" style="display: none;">
        <i class="bi bi-people fs-1"></i>
        <h4>No Users Found</h4>
        <p>There are no users in the system yet.</p>
    </div>

    <!-- Pagination -->
    <div class="pagination-container" id="paginationContainer" style="display: none;">
        <nav aria-label="Users pagination">
            <ul class="pagination">
                <li class="page-item disabled">
                    <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Previous</a>
                </li>
                <li class="page-item active" aria-current="page">
                    <a class="page-link" href="#">1</a>
                </li>
                <li class="page-item">
                    <a class="page-link" href="#">2</a>
                </li>
                <li class="page-item">
                    <a class="page-link" href="#">3</a>
                </li>
                <li class="page-item">
                    <a class="page-link" href="#">Next</a>
                </li>
            </ul>
        </nav>
    </div>
</div>

<!-- Edit User Modal -->
<div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editUserModalLabel">Edit User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editUserForm">
                    <input type="hidden" id="editUserId" name="Id" />
                    <div class="mb-3">
                        <label for="editUserName" class="form-label">Name</label>
                        <input type="text" class="form-control" id="editUserName" name="Name" required>
                    </div>
                    <div class="mb-3">
                        <label for="editUserEmail" class="form-label">Email</label>
                        <input type="email" class="form-control" id="editUserEmail" name="Email" required>
                    </div>
                    <div class="mb-3">
                        <label for="editUserPhone" class="form-label">Phone Number</label>
                        <input type="tel" class="form-control" id="editUserPhone" name="PhoneNo">
                    </div>
                    <div class="mb-3">
                        <label for="editUserRole" class="form-label">Role</label>
                        <select class="form-select" id="editUserRole" name="Role" required>
                            <option value="Admin">Admin</option>
                            <option value="User">User</option>
                            <option value="Volunteer">Volunteer</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveUserChanges">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<!-- View User Modal -->
<div class="modal fade" id="viewUserModal" tabindex="-1" aria-labelledby="viewUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="viewUserModalLabel">User Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="user-details">
                    <div class="mb-3">
                        <label class="form-label fw-bold">Name:</label>
                        <p id="viewUserName" class="mb-0"></p>
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold">Email:</label>
                        <p id="viewUserEmail" class="mb-0"></p>
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold">Phone Number:</label>
                        <p id="viewUserPhone" class="mb-0"></p>
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold">Role:</label>
                        <p id="viewUserRole" class="mb-0"></p>
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold">Join Date:</label>
                        <p id="viewUserJoinDate" class="mb-0"></p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete User Modal -->
<div class="modal fade" id="deleteUserModal" tabindex="-1" aria-labelledby="deleteUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteUserModalLabel">Delete User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this user?</p>
                <div class="user-details">
                    <div class="mb-2">
                        <label class="form-label fw-bold">Name:</label>
                        <p id="deleteUserName" class="mb-0"></p>
                    </div>
                    <div class="mb-2">
                        <label class="form-label fw-bold">Email:</label>
                        <p id="deleteUserEmail" class="mb-0"></p>
                    </div>
                    <div class="mb-2">
                        <label class="form-label fw-bold">Role:</label>
                        <p id="deleteUserRole" class="mb-0"></p>
                    </div>
                </div>
                <div class="alert alert-warning mt-3" role="alert">
                    <i class="bi bi-exclamation-triangle-fill"></i> This action cannot be undone.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteUser">Delete User</button>
            </div>
        </div>
    </div>
</div>

<!-- Bootstrap JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>



<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Load users when page loads
        loadUsers();

        // Set up event listeners for filters
        setupEventListeners();
    });

    // Global variables
    let allUsers = [];
    let filteredUsers = [];
    let currentUserIdToDelete = null;

    // Function to load users from API
    async function loadUsers() {
        try {
            // Show loading, hide other elements
            document.getElementById('loadingSpinner').style.display = 'flex';
            document.getElementById('usersTableContainer').style.display = 'none';
            document.getElementById('errorMessage').style.display = 'none';
            document.getElementById('emptyState').style.display = 'none';
            document.getElementById('paginationContainer').style.display = 'none';

            // Get token from localStorage
            const token = localStorage.getItem('access_token');
            if (!token) {
                throw new Error('Please log in to view users');
            }

            // Make API request to /api/users (not /users)
            const response = await fetch('/api/users', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                if (response.status === 401) {
                    throw new Error('Authentication failed. Please log in again.');
                } else if (response.status === 403) {
                    throw new Error('You do not have permission to view users. Admin access required.');
                }
                throw new Error('Failed to fetch users');
            }

            const data = await response.json();

            if (data.success) {
                allUsers = data.data;
                filteredUsers = [...allUsers];

                // Hide loading, show table
                document.getElementById('loadingSpinner').style.display = 'none';

                if (allUsers.length > 0) {
                    document.getElementById('usersTableContainer').style.display = 'block';
                    document.getElementById('paginationContainer').style.display = 'flex';
                    populateUsersTable(allUsers);
                    applyFilters(); // Apply any existing filters
                } else {
                    document.getElementById('emptyState').style.display = 'block';
                }
            } else {
                throw new Error(data.message || 'Failed to load users');
            }
        } catch (error) {
            console.error('Error loading users:', error);
            document.getElementById('loadingSpinner').style.display = 'none';
            document.getElementById('errorMessage').style.display = 'block';
            document.getElementById('errorText').textContent = error.message;
        }
    }

    // Function to populate users table
    function populateUsersTable(users) {
        const tableBody = document.getElementById('usersTableBody');
        tableBody.innerHTML = '';

        users.forEach((user, index) => {
            const row = document.createElement('tr');

            // Format the date for display
            const joinDate = new Date(user.createdAt);
            const formattedDate = formatDate(joinDate);

            // Determine badge class based on role
            let badgeClass = '';
            switch(user.roleName) {
                case 'Admin':
                    badgeClass = 'badge-admin';
                    break;
                case 'User':
                    badgeClass = 'badge-user';
                    break;
                case 'Volunteer':
                    badgeClass = 'badge-volunteer';
                    break;
                default:
                    badgeClass = 'badge-user';
            }

            row.setAttribute('data-role', user.roleName);
            row.setAttribute('data-date', user.createdAt);
            row.setAttribute('data-user-id', user.userID);

            row.innerHTML = `
                <td class="text-center">${index + 1}</td>
                <td>${user.name}</td>
                <td>${user.email}</td>
                <td>${user.phoneNo || 'N/A'}</td>
                <td class="text-center"><span class="role-badge ${badgeClass}">${user.roleName}</span></td>
                <td class="text-center">${formattedDate}</td>
                <td class="text-center">
                    <div class="action-buttons">
                        <button class="btn-action btn-edit" data-bs-toggle="modal" data-bs-target="#editUserModal" data-user-id="${user.userID}">
                            <i class="bi bi-pencil"></i>
                        </button>
                        <button class="btn-action btn-delete" data-bs-toggle="modal" data-bs-target="#deleteUserModal" data-user-id="${user.userID}">
                            <i class="bi bi-trash"></i>
                        </button>
                        <button class="btn-action btn-view" data-bs-toggle="modal" data-bs-target="#viewUserModal" data-user-id="${user.userID}">
                            <i class="bi bi-eye"></i>
                        </button>
                    </div>
                </td>
            `;

            tableBody.appendChild(row);
        });

        // Set up event listeners for the action buttons
        setupActionButtonListeners();
    }

    // Function to format date for display
    function formatDate(date) {
        if (isNaN(date.getTime())) {
            return 'Invalid Date';
        }

        return date.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
        });
    }

    // Function to set up event listeners
    function setupEventListeners() {
        const roleFilter = document.getElementById('roleFilter');
        const sortOrder = document.getElementById('sortOrder');
        const searchInput = document.getElementById('search');
        const applyButton = document.getElementById('applyFilters');
        const resetButton = document.getElementById('resetFilters');

        applyButton.addEventListener('click', applyFilters);
        resetButton.addEventListener('click', resetFilters);
        searchInput.addEventListener('keyup', applyFilters);
        roleFilter.addEventListener('change', applyFilters);
        sortOrder.addEventListener('change', applyFilters);

        // Set up modal event listeners
        setupModalListeners();
    }

    // Function to set up action button listeners
    function setupActionButtonListeners() {
        // Edit buttons
        document.querySelectorAll('.btn-edit').forEach(button => {
            button.addEventListener('click', function() {
                const userId = this.getAttribute('data-user-id');
                const user = allUsers.find(u => u.userID == userId);

                if (user) {
                    document.getElementById('editUserId').value = user.userID;
                    document.getElementById('editUserName').value = user.name;
                    document.getElementById('editUserEmail').value = user.email;
                    document.getElementById('editUserPhone').value = user.phoneNo || '';
                    document.getElementById('editUserRole').value = user.roleName;
                }
            });
        });

        // View buttons
        document.querySelectorAll('.btn-view').forEach(button => {
            button.addEventListener('click', function() {
                const userId = this.getAttribute('data-user-id');
                const user = allUsers.find(u => u.userID == userId);

                if (user) {
                    const joinDate = new Date(user.createdAt);
                    const formattedDate = formatDate(joinDate);

                    document.getElementById('viewUserName').textContent = user.name;
                    document.getElementById('viewUserEmail').textContent = user.email;
                    document.getElementById('viewUserPhone').textContent = user.phoneNo || 'N/A';
                    document.getElementById('viewUserRole').textContent = user.roleName;
                    document.getElementById('viewUserJoinDate').textContent = formattedDate;
                }
            });
        });

        // Delete buttons
        document.querySelectorAll('.btn-delete').forEach(button => {
            button.addEventListener('click', function() {
                const userId = this.getAttribute('data-user-id');
                const user = allUsers.find(u => u.userID == userId);

                if (user) {
                    currentUserIdToDelete = userId;
                    document.getElementById('deleteUserName').textContent = user.name;
                    document.getElementById('deleteUserEmail').textContent = user.email;
                    document.getElementById('deleteUserRole').textContent = user.roleName;
                }
            });
        });
    }

    // Function to set up modal listeners
    function setupModalListeners() {
        // Save changes button
        document.getElementById('saveUserChanges').addEventListener('click', async function() {
            try {
                const userId = document.getElementById('editUserId').value;
                const name = document.getElementById('editUserName').value;
                const email = document.getElementById('editUserEmail').value;
                const phoneNo = document.getElementById('editUserPhone').value;
                const roleName = document.getElementById('editUserRole').value;

                // Get token from localStorage
                const token = localStorage.getItem('access_token');
                if (!token) {
                    throw new Error('Please log in to update user');
                }

                // Make API request to update user - use /api/users/{id}
                const response = await fetch(`/api/users/${userId}`, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        Email: email,
                        Name: name,
                        RoleName: roleName,
                        PhoneNo: phoneNo
                    })
                });

                if (!response.ok) {
                    if (response.status === 403) {
                        throw new Error('You do not have permission to update users. Admin access required.');
                    }

                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to update user');
                }

                const data = await response.json();

                if (data.success) {
                    // Close modal and reload users
                    bootstrap.Modal.getInstance(document.getElementById('editUserModal')).hide();
                    loadUsers();
                    alert('User updated successfully');
                } else {
                    throw new Error(data.message || 'Failed to update user');
                }
            } catch (error) {
                console.error('Error updating user:', error);
                alert('Error updating user: ' + error.message);
            }
        });

        // Confirm delete button
        document.getElementById('confirmDeleteUser').addEventListener('click', async function() {
            try {
                if (!currentUserIdToDelete) {
                    throw new Error('No user selected for deletion');
                }

                // Get token from localStorage
                const token = localStorage.getItem('access_token');
                if (!token) {
                    throw new Error('Please log in to delete user');
                }

                // Make API request to delete user - use /api/users/{id}
                const response = await fetch(`/api/users/${currentUserIdToDelete}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    if (response.status === 403) {
                        throw new Error('You do not have permission to delete users. Admin access required.');
                    }

                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to delete user');
                }

                const data = await response.json();

                if (data.success) {
                    // Close modal and reload users
                    bootstrap.Modal.getInstance(document.getElementById('deleteUserModal')).hide();
                    loadUsers();
                    alert('User deleted successfully');
                } else {
                    throw new Error(data.message || 'Failed to delete user');
                }
            } catch (error) {
                console.error('Error deleting user:', error);
                alert('Error deleting user: ' + error.message);
            }
        });
    }

    // Apply filters function
    function applyFilters() {
        const roleValue = document.getElementById('roleFilter').value;
        const searchTerm = document.getElementById('search').value.toLowerCase();
        const sortValue = document.getElementById('sortOrder').value;

        filteredUsers = allUsers.filter(user => {
            let matches = true;

            // Apply role filter
            if (roleValue !== 'all' && user.roleName !== roleValue) {
                matches = false;
            }

            // Apply search filter
            if (searchTerm && !user.name.toLowerCase().includes(searchTerm) && !user.email.toLowerCase().includes(searchTerm)) {
                matches = false;
            }

            return matches;
        });

        // Apply sorting
        if (sortValue === 'latest') {
            filteredUsers.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
        } else if (sortValue === 'oldest') {
            filteredUsers.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
        }

        populateUsersTable(filteredUsers);
    }

    // Reset filters function
    function resetFilters() {
        document.getElementById('roleFilter').value = 'all';
        document.getElementById('sortOrder').value = 'latest';
        document.getElementById('search').value = '';

        filteredUsers = [...allUsers];
        populateUsersTable(filteredUsers);
    }
</script>